plot(Ci_Pa,Photo,ylab="", xlab="",cex.lab=1.2,cex.axis=1.5,cex=2)
mtext(expression("Intercellular "*CO[2]*" Pressure (Pa)"),side=1,line=3.3,cex=1.5)
mtext(expression("Net photosynthetic rate  (umol  "* CO[2]*   m^-2*   s^-1*")"),side=2,line=2.5,cex=1.5)
curve(ifelse(((Vcmax*(x-mean(aci$GammaStar)))/(x+(mean(aci$Kc)*(1+(O/mean(aci$Ko))))))<((J*(x-mean(aci$GammaStar)))/((4*x)+(8*mean(aci$GammaStar)))),((Vcmax*(x-mean(aci$GammaStar)))/(x+(mean(aci$Kc)*(1+(O/mean(aci$Ko)))))),((J*(x-mean(aci$GammaStar)))/((4*x)+(8*mean(aci$GammaStar)))))-Rd,add=T) #Reasonable fit? Could check goodness of fit, model assumptions
# ---Frequentl
summary(aci.fit)
aci = dat.all[which(dat.all$geno_TP == "910_TP2"),]
Ci<-aci$Ci # Ci (ppm)
Ci_Pa<-aci$Ci_Pa # Ci (Pa)
Photo<-aci$Photo #Anet - net photosynthetic rate
CO2R<-aci$CO2R
TotalCurveData<-data.frame(Ci, CO2R, Photo, Ci_Pa)
TotalCurveData # *inspect raw data and check notebook (data reasonable or need edited/discarded?)
par(mar=c(3,3,0,0),oma=c(1.5,1.5,1,1))
plot(Ci_Pa,Photo,ylab="", xlab="")
mtext(expression("Intercellular "*CO[2]*" Pressure (Pa)"),side=1,line=3.3)
mtext(expression(A[net]*" ("*mu*"mol "*CO[2]*" "*m^-2*s^-1*")"),side=2,line=2.5)
# ---Tempera
R=0.008314 #(kJ mol^-1 K^-1)
aci$Kc=exp(35.9774-80.99/(R*(aci$Tleaf+273.15))) #Michaelis-Menten constant for Rubisco for O2 (Pa)
aci$Ko=exp(12.3772-23.72/(R*(aci$Tleaf+273.15))) #Michaelis-Menten constant for Rubisco for CO2 (kPa)
aci$GammaStar=exp(11.187-24.46/(R*(aci$Tleaf+273.15))) #Photorespiration compensation point (Pa)
O=21 #oxygen (O2) partial pressure (kPa)
# Alternative constants from Bernacchi et al. (2001) Plant Cell Env 24: 253-259
# Ci units in ppm (but can be converted to Pa by atmospheric pressure)
#R=0.008314 #(kJ mol^-1 K^-1)
#aci$Kc=exp(38.05-79.43/(R*(aci$Tleaf+273.15))) #umol mol-1
#aci$Ko=exp(20.30-36.38/(R*(aci$Tleaf+273.15))) #mmol mol-1
#aci$GammaStar=exp(19.02-37.83/(R*(aci$Tleaf+273.15))) #umol mol-1
#O=210
# ---RuBisCO limited portion---
#(Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko)))))-Rd
# ---RUBP limited portion---
#((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar)))-Rd
# ---TPU.limited portion
#3*TPU-Rd
# Few studies find triose phosphate limitation (under natural conditions), but could easily be added to model below to test (but with loss of statistical power); it is often not considered, but depends on the dataset
# Miao et al (2009) Plant, Cell, Env 32:109-122 recommend fitting when possible or removing TPU limited points from dataset before fitting
# Simultaneous estimation method described by Dubois et al. 2007 New Phyt 176:402-414
# Could change optimization algorithm (default here is Gauss-Newton)
# Could also do a "grid search" if estimates are sensitive to starting values
aci.fit<-nls(Photo~ifelse(((Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko)))))<((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar))),((Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko))))),((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar))))-Rd,start=list(Vcmax=50,J=100,Rd=0.5),data=aci) #if error: reconsider starting values, bad dataset? (too few points or response curve not clear)
summary(aci.fit)
aci = dat.all[which(dat.all$geno_TP == "938_TP2"),]
Ci<-aci$Ci # Ci (ppm)
Ci_Pa<-aci$Ci_Pa # Ci (Pa)
Photo<-aci$Photo #Anet - net photosynthetic rate
CO2R<-aci$CO2R
TotalCurveData<-data.frame(Ci, CO2R, Photo, Ci_Pa)
TotalCurveData # *inspect raw data and check notebook (data reasonable or need edited/discarded?)
par(mar=c(3,3,0,0),oma=c(1.5,1.5,1,1))
plot(Ci_Pa,Photo,ylab="", xlab="")
mtext(expression("Intercellular "*CO[2]*" Pressure (Pa)"),side=1,line=3.3)
mtext(expression(A[net]*" ("*mu*"mol "*CO[2]*" "*m^-2*s^-1*")"),side=2,line=2.5)
# ---Temperature adjusted coefficients:
# Consta
R=0.008314 #(kJ mol^-1 K^-1)
aci$Kc=exp(35.9774-80.99/(R*(aci$Tleaf+273.15))) #Michaelis-Menten constant for Rubisco for O2 (Pa)
aci$Ko=exp(12.3772-23.72/(R*(aci$Tleaf+273.15))) #Michaelis-Menten constant for Rubisco for CO2 (kPa)
aci$GammaStar=exp(11.187-24.46/(R*(aci$Tleaf+273.15))) #Photorespiration compensation point (Pa)
O=21 #oxygen (O2) partial pressure (kPa)
# Alternative constants from Bernacchi et al. (2001) Plant Cell Env 24: 253-259
# Ci units in ppm (but can be converted to Pa by atmospheric pressure)
#R=0.008314 #(kJ mol^-1 K^-1)
#aci$Kc=exp(38.05-79.43/(R*(aci$Tleaf+273.15))) #umol mol-1
#aci$Ko=exp(20.30-36.38/(R*(aci$Tleaf+273.15))) #mmol mol-1
#aci$GammaStar=exp(19.02-37.83/(R*(aci$Tleaf+273.15))) #umol mol-1
#O=210
# ---RuBisCO limited portion---
#(Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko)))))-Rd
# ---RUBP limited portion---
#((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar)))-Rd
# ---TPU.limited portion
#3*TPU-Rd
# Few studies find triose phosphate limitation (under natural conditions), but could easily be added to model below to test (but with loss of statistical power); it is often not considered, but depends on the dataset
# Miao et al (2009) Plant, Cell, Env 32:109-122 recommend fitting when possible or removing TPU limited points from dataset before fitting
# Simultaneous estimation method described by Dubois et al. 2007 New Phyt 176:402-414
# Could change optimization algorithm (default here is Gauss-Newton)
# Could also do a "grid search" if estimates are sensitive to starting values
aci.fit<-nls(Photo~ifelse(((Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko)))))<((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar))),((Vcmax*(Ci_Pa-GammaStar))/(Ci_Pa+(Kc*(1+(O/Ko))))),((J*(Ci_Pa-GammaStar))/((4*Ci_Pa)+(8*GammaStar))))-Rd,start=list(Vcmax=50,J=100,Rd=0.5),data=aci) #if error: reconsider starting values, bad dataset? (too few points or response curve not clear)
summary(aci.fit)
library(readxl)
Rice <- read_excel("Google Drive/HTP_lessonPlan/data/Rice_CEPF_RGB_compiled.xlsx")
View(Rice)
library(readxl)
Papaya <- read_excel("Google Drive/HTP_lessonPlan/data/Papaya_CEPF_RGB_compiled.xlsx")
View(Papaya)
Rice <- read_excel("Google Drive/HTP_lessonPlan/data/Rice_CEPF_RGB_compiled.xlsx")
Papaya <- read_excel("Google Drive/HTP_lessonPlan/data/Papaya_CEPF_RGB_compiled.xlsx")
names(Rice)
Rice <- read_excel("Google Drive/HTP_lessonPlan/data/Rice_CEPF_RGB_compiled_withJday.xlsx")
Papaya <- read_excel("Google Drive/HTP_lessonPlan/data/Papaya_CEPF_RGB_compiled_withJday.xlsx")
names(Rice)
plot(Rice$PlantAge, Rice$SideAverageHeight)
plot(Papaya$PlantAge, Papaya$SideAverageHeight, xlab = "plant age", ylab = "side average height", main = "papaya pilot")
plot(Rice$PlantAge, Rice$TopPlantSurface, xlab = "plant age", ylab = "top plant surfance", main = "rice pilot")
plot(Papaya$PlantAge, Papaya$TopPlantSurface, xlab = "plant age", ylab = "top plant surfance", main = "papaya pilot")
par(mfrow=c(2,1))
plot(Rice$PlantAge, Rice$SideAverageHeight, xlab = "plant age", ylab = "side average height", main = "rice pilot")
plot(Papaya$PlantAge, Papaya$SideAverageHeight, xlab = "plant age", ylab = "side average height", main = "papaya pilot")
plot(Rice$PlantAge, Rice$SideAverageSurface, xlab = "plant age", ylab = "side average height", main = "rice pilot")
par(mfrow=c(2,1))
plot(Rice$PlantAge, Rice$SideAverageSurface, xlab = "plant age", ylab = "side average surface", main = "rice pilot")
plot(Papaya$PlantAge, Papaya$SideAverageSurface, xlab = "plant age", ylab = "side average surface", main = "papaya pilot")
for(i in 1:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, Rice$SideAverageSurface, xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, Papaya$SideAverageSurface, xlab = "plant age", ylab = trait, main = "papaya pilot")
}
getwd()
list.files(getwd())
setwd("/Users/dianerwang/Desktop")
getwd()
par(mfrow=c(2,1))
plot(Rice$PlantAge, Rice$SideAverageSurface, xlab = "plant age", ylab = "side average surface", main = "rice pilot")
plot(Papaya$PlantAge, Papaya$SideAverageSurface, xlab = "plant age", ylab = "side average surface", main = "papaya pilot")
pdf("cepf_rice_papaya_pilots.pdf", height = 11, width = 8)
for(i in 1:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, Rice$SideAverageSurface, xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, Papaya$SideAverageSurface, xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
pdf("cepf_rice_papaya_pilots.pdf", height = 11, width = 8)
for(i in 2:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, Rice[,i], xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, Papaya[,i], xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
View(Papaya)
pdf("cepf_rice_papaya_pilots.pdf", height = 11, width = 8)
for(i in 7:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, Rice[,i], xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, Papaya[,i], xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
par(mfrow=c(2,1))
trait = names(Rice)[i]
i=7
plot(Rice$PlantAge, Rice[,i], xlab = "plant age", ylab = trait, main = "rice pilot")
length(Rice[,i])
plot(Rice$PlantAge, Rice[,trait], xlab = "plant age", ylab = trait, main = "rice pilot")
trait
Rice[, "SideAverageCenterOfMassDistance"]
as.numeric(Rice[,trait])
class(Rice$SideAverageCenterOfMassDistance)
View(Rice)
?read_excel
Rice <- read_excel("Google Drive/HTP_lessonPlan/data/Rice_CEPF_RGB_compiled_withJday.xlsx",
col_types= c(rep("guess", 5), rep("numeric", 27) ) )
getwd()
Rice <- read_excel("/Users/dianerwang/Google Drive/HTP_lessonPlan/data/Rice_CEPF_RGB_compiled_withJday.xlsx",
col_types= c(rep("guess", 5), rep("numeric", 27) ) )
Papaya <- read_excel("/Users/dianerwang/Google Drive/HTP_lessonPlan/data/Papaya_CEPF_RGB_compiled_withJday.xlsx",
col_types= c(rep("guess", 5), rep("numeric", 27) ) )
i
plot(Rice$PlantAge, Rice[,trait], xlab = "plant age", ylab = trait, main = "rice pilot")
class(Rice[,trait])
as.numeric(Rice[,trait])
class(Rice[,i])
as.numeric(Rice[,7])
Rice[,7]
as.vector(Rice[,i])
as.matrix(Rice[,7])
dim(as.matrix(Rice[,7]))
as.numeric(as.matrix(Rice[,7]))
as.numeric(as.matrix(Rice[,12]))
as.numeric(as.matrix(Rice[,15]))
Rice[,14]
plot(Rice$PlantAge, as.numeric(as.matrix(Rice[,trait])), xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Rice$PlantAge, Rice$SideAverageCenterOfMassDistance)
pdf("cepf_rice_papaya_pilots.pdf", height = 11, width = 8)
for(i in 7:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, as.numeric(as.matrix(Rice[,trait])), xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, Papaya[,trait], xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
pdf("cepf_rice_papaya_pilots.pdf", height = 11, width = 8)
for(i in 7:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, as.numeric(as.matrix(Rice[,trait])), xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, as.numeric(as.matrix(Papaya[,trait])), xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
pdf("cepf_rice_papaya_pilots.pdf", height = 8, width = 8)
for(i in 7:32){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, as.numeric(as.matrix(Rice[,trait])), xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, as.numeric(as.matrix(Papaya[,trait])), xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
i
trait
View(Rice)
Rice[,trait]
View(Rice)
View(Papaya)
Papaya$SideAverageWidth = NULL
Rice$SideAverageWidth = NULL
pdf("cepf_rice_papaya_pilots.pdf", height = 8, width = 8)
for(i in 7:31){
par(mfrow=c(2,1))
trait = names(Rice)[i]
plot(Rice$PlantAge, as.numeric(as.matrix(Rice[,trait])), xlab = "plant age", ylab = trait, main = "rice pilot")
plot(Papaya$PlantAge, as.numeric(as.matrix(Papaya[,trait])), xlab = "plant age", ylab = trait, main = "papaya pilot")
}
dev.off()
shiny::runApp('~/Google Drive/HTP_lessonPlan/sample working app')
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("pool")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("tidyr")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("stringr")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("data.table")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("raster")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("latticeExtra")
install.packages("plyr")
install.packages("dplyr")
install.packages("dplyr")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
install.packages("rgdal")
runApp('~/Google Drive/HTP_lessonPlan/sample working app')
runApp('~/Google Drive/HTP_lessonPlan/draft code that is partially working/Tab_1.R')
runApp('~/Google Drive/HTP_lessonPlan/draft code that is partially working/test_app_papaya_V2.R')
setwd("~/Google Drive/HTP_lessonPlan/draft code that is partially working")
runApp('test_app_papaya_V2.R')
runApp('Tab_1.R')
library(shiny); runApp('Tab_1.R')
runApp('Tab_1.R')
runApp('Tab_1.R')
setwd("~/Google Drive/HTP_lessonPlan/qgshiny-master/qgshiny-master/inst/shiny-examples/app")
runApp()
setwd("~/Google Drive/HTP_lessonPlan/draft code that is partially working/app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?img
??shiny::img
runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Google Drive/HTP_lessonPlan/draft code that is partially working/Tab_1.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("source_HTP.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Google Drive/HTP_lessonPlan/draft code that is partially working/Tab_1.R')
runApp()
runApp()
# Source the code
source("source_HTP.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp('~/Google Drive/HTP_lessonPlan/draft code that is partially working/Tab_1.R')
runApp()
runApp()
### read in CEPF dataset
df <- read.csv("CEPF_RGB_compiled_for_app.csv")
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
runApp()
runApp()
Sub_species <- levels(as.factor(df$Subpop))
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
Sub_species <- levels(as.factor(df$Subpop))
Species <- levels(as.factor(df$Species))
variables <- colnames(df)[10:length(colnames(df))]
Subpop <- levels(as.factor(df$Subpop))
Species <- levels(as.factor(df$Species))
variables <- colnames(df)[10:length(colnames(df))]
variables
growth_var <- colnames(df)[10:length(colnames(df))]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
Subpop <- levels(as.factor(df$Subpop))
Species <- levels(as.factor(df$Species))
growth_var <- colnames(df)[10:length(colnames(df))]
runApp()
runApp()
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
names(df)
growth_var <- colnames(df)[10:length(colnames(df))]
growth_var
runApp()
runApp()
runApp()
runApp()
View(df)
unique(df$Species)
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
?textOutput
source("source_HTP.R")
runApp()
log(1)
log(0)
log(2.71)
runApp()
unique(df$PlantAge)
which(df$PlantAge == 17)
if(length(which(df$PlantAge == 17) == 0))
)
length(which(df$PlantAge == 17) == 0)
length(which(df$PlantAge == 17) == 0
)
length(which(df$PlantAge == 17)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput3
runApp()
?sliderInput
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
View(df)
rice = df[which(df$Species == "Rice"),]
unique(rice$DESCRIPTION)
### read in CEPF dataset
df <- read.csv("data/CEPF_RGB_compiled_for_app.csv")
unique(rice$Genotype)
rice = df[which(df$Species == "Rice"),]
unique(rice$Genotype)
runApp()
idx = which(names(df) == "SideAverageHeight")
df.tab5 = df[which(df$Species == "Rice"),]
idx = which(names(df) == "SideAverageHeight")
df.tab5 = df[which(df$Species == "Rice"),]
idx = which(names(df) == "SideAverageHeight")
idx.geno = which(df.tab5$Genotype == "Bico Branco")
# t (time) and A (area) for nls
t = df.tab5$PlantAge[idx.geno]
A = df.tab5[idx.geno, idx]
# initial values
K.init = max(A)
N0.init = min(A[A>0]) # default to something small
d= data.frame(cbind(t, A))
names(d) = c("t", 'n')
# make an initial estimate for r
glm_mod <- stats::glm(n / K.init ~ t,
family = stats::quasibinomial("logit"),
data = d)
r_init <- stats::coef(glm_mod)[[2]]   # slope
mod.logistic = nls(A ~ K/(1+(((K - N0)/N0) * exp(-r*(t)))),
start = list(K = K.init, r = r_init, N0= N0.init), data= data.frame(A, t),
trace = TRUE)
summary(mod.logistic)
mod.logistic$parameters
coef(mod.logistic)
class(coef(mod.logistic))
plot(df.tab5$PlantAge, df.tab5[,idx], main = "Rice SideAverageHeight {to replace with TopSurfaceArea}",
ylab = "Rice SideAverageHeight", xlab = "PlantAge (days)")
plot.fitted.log(params[1], params[3] , params[2] , 1:65, "darkblue" ) ## L58
plot.fitted.log = function(K, N0, r, t, color){
A = K/(1+(((K - N0)/N0) * exp(-r*(t))))
points(t, A, col = color, type="l", lwd = 2)
}
plot.fitted.log(params[1], params[3] , params[2] , 1:65, "darkblue" ) ## L58
params = coef(mod.logistic)
plot.fitted.log(params[1], params[3] , params[2] , 1:65, "darkblue" ) ## L58
plot(t, A, main = "Rice SideAverageHeight {to replace with TopSurfaceArea}",
ylab = "Rice SideAverageHeight", xlab = "PlantAge (days)")
plot.fitted.log(params[1], params[3] , params[2] , 1:65, "darkblue" ) ## L58
runApp()
runApp()
plot(df.tab5$PlantAge, df.tab5[,idx])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
